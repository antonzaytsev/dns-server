# DNS Server Docker Compose Configuration
#
# For Linux/Debian systems, run with user mapping to avoid permission issues:
#   UID=$(id -u) GID=$(id -g) docker-compose up -d --build
#
# For macOS/other systems, default UID/GID (1000:1000) usually works:
#   docker-compose up -d --build

services:
  dns-server:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: dns-server
    restart: unless-stopped

    # Run as host user to avoid permission issues with volume mounts
    # Set with: UID=$(id -u) GID=$(id -g) docker-compose up -d --build
    user: "${UID:-1000}:${GID:-1000}"

    # Use host networking to preserve client IPs
    network_mode: host

    # Volume mounts
    volumes:
      - ./:/app

    # Environment variables
    environment:
      - PYTHONUNBUFFERED=1
      - PYTHONPATH=/app/src
      - DNS_SERVER_SERVER_BIND_ADDRESS=0.0.0.0  # Bind to all interfaces with host networking

    # Health check
    healthcheck:
      test: ["CMD", "python", "/app/src/dns_server/main.py", "--config", "/app/config/default.yaml", "--health-check"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

    # Resource limits
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.5'

    # Security settings
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE    # Required to bind to ports

    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"
